package Pseudo;

import java_cup.runtime.*;

parser code {:
public static void main(String args[]) throws Exception {
	SymbolFactory sf = new DefaultSymbolFactory();
	if (args.length==0) 
		new parser(new Scanner(System.in,sf),sf).parse();
	else 
		new parser(new Scanner(new java.io.FileInputStream(args[0]),sf),sf).parse();
	}

:}

terminal ALGORITMO, IDENTIFICADOR, VAR, CONST, DOSPUNTOS, NUEVALINEA, COMA, CORCHIZQ, CORCHDER, NUM, IDENTIFICADOR, ENTERO, REAL, CARACTER, CADENA;
terminal LOGICO, INICIO, FIN, NUEVALINEA, SI, PARENTIZQ, PARENTDER, ENTONCES, SINO, PARA, DESDE, HASTA, MIENTRAS, REPITA, ASIGNACION, MENOR, MAYOR;
terminal  MENORIGUAL, MAYORIGUAL, DIFERENTE, IGUAL, SUMA, RESTA, MULTIPLI, DIVISION;


non terminal programa, decl_algoritmo, decl_variables, decl_const, lista_declaraciones ,linea_decl, lista_identificadores, decl_ident, tamano;
non terminal ident, tipo_dato, decl_sentencias, lista_sentencias, sentencia, sent_expr, sent_sel, sent_iter, ciclo_para, ciclo_mientras;
non terminal ciclo_hasta, expr, var, expr_simple, oprel, expr_aritm, opsuma, termino, opmulti, factor;


programa ::=  decl_algoritmo  decl_variables  decl_const  decl_sentencias;

decl_algoritmo ::= ALGORITMO IDENTIFICADOR;

decl_variables ::= VAR lista_declaraciones;

decl_const ::= CONST lista_declaraciones;

lista_declaraciones ::=	linea_decl lista_declaraciones
			|	linea_decl;

linea_decl ::=  lista_identificadores DOSPUNTOS tipo_dato NUEVALINEA;


lista_identificadores ::= decl_ident COMA lista_identificadores 
	| decl_ident; 

decl_ident ::= 	ident
		|	ident CORCHIZQ tamano CORCHDER;

tamano ::= NUM;

ident ::= IDENTIFICADOR;


tipo_dato ::= ENTERO | REAL  | CARACTER | CADENA | LOGICO;

decl_sentencias ::=  INICIO lista_sentencias FIN;

lista_sentencias ::= sentencia lista_sentencias | {/*Vacio*/};

sentencia ::=  	sent_expr 
		| sent_sel
		| sent_iter 
		| error 
		;

sent_expr ::= 	expr NUEVALINEA
		|	NUEVALINEA
		;

sent_sel	::= 	SI PARENTIZQ expr_simple PARENTDER ENTONCES sentencia 
		|	SI PARENTIZQ expr_simple PARENTDER ENTONCES sentencia SINO sentencia
		;

sent_iter	::=  	ciclo_para
		|	ciclo_mientras
		|	ciclo_hasta
		;

ciclo_para	::=	PARA var DESDE expr_aritm HASTA expr_aritm sent
			;

ciclo_mientras	::=	MIENTRAS PARENTIZQ expr_simple PARENTDER sentencia
			;

ciclo_hasta	::=	::=	REPITA sentencia HASTA expr_simple
			;
		

expr ::=  	var ASIGNACION expr
	|	expr_simple
	;


var ::= 	ident 
	|	ident CORCHIZQ expr CORCHDER
	|	error
	;

expr_simple ::= expr_aritm oprel expr_aritm
		  |	expr_aritm
		  ;

oprel	::= 	MENOR
	|	MAYOR
	|	MENORIGUAL
	|	MAYORIGUAL
	|	DIFERENTE
	|	IGUAL
	;

expr_aritm ::= 	expr_aritm opsuma termino
		|	termino
		;

opsuma	::=	SUMA
		|	RESTA;

termino	::=	termino opmulti	factor
		|	factor
		;

opmulti	::=	MULTIPLI
		|	DIVISION
		;

factor	::=	PARENTIZQ expr PARENTDER
		|	var
		|	NUM
		;

/*comentario ::= .... HACER*/
/* añadir proced, funciones, sus llamadas. */

/*Debo recordar que las sentencias son hijos de extrema izquierda con hermanos a la derecha*/


stmt        : expr_stmt { $$ = $1; if(debug) printf("regla 14a -> stmt : expr_stmt\n");}
            | cmpd_stmt { $$ = $1; if(debug) printf("regla 14b -> stmt : cmpd_stmt\n");}
            | sel_stmt { $$ = $1; if(debug) printf("regla 14c -> stmt : sel_stmt\n");}
            | iter_stmt  { $$ = $1; if(debug) printf("regla 14d -> stmt : iter_stmt\n");}
            | return_stmt  { $$ = $1; if(debug) printf("regla 14e -> stmt : return_stmt\n");}
            | error { $$ = NULL; if(debug) printf("regla 14f-> stmt : error\n");}


